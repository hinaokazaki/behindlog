// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String   @id              // ← Supabaseのauth.users.id（UUID）
  name               String
  colorTheme         ColorThemeType
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  records            DailyRecord[]
  goals              Goal[]
  todos              Todo[] 
  commits            CommitTime[]
  contactMessages    ContactMessage[]
  friendships1       Friendship[] @relation("User1")
  friendships2       Friendship[] @relation("User2")
  invitedFriendships Friendship[] @relation("InviterUser")
}

model Friendship {
  id              Int      @id @default(autoincrement())
  userId1         String
  userId2         String
  inviterUserId   String
  inviteeEmail    String
  message         String
  status          InvitationStatus
  token           String   @default(uuid())
  respondedAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user1           User     @relation("User1", fields: [userId1], references: [id], onDelete: Cascade)
  user2           User     @relation("User2", fields: [userId2], references: [id], onDelete: Cascade)
  inviterUser     User     @relation("InviterUser", fields: [inviterUserId], references: [id], onDelete: Cascade)
}

model ContactMessage {
  id        Int      @id @default(autoincrement())
  userId    String?  // 未ログインの投稿も許可するため nullable
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())

  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DailyRecord {
  id               Int      @id @default(autoincrement())
  userId           String
  recordedAt       DateTime
  totalStudyTime   Int
  memo             String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Goal {
  id         Int     @id @default(autoincrement())
  userId     String
  title      String
  deadline   DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Todo {
  id           Int     @id @default(autoincrement())
  userId       String
  title        String
  dueDate      DateTime
  isCompleted  Boolean
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CommitTime {
  id           Int     @id @default(autoincrement())
  userId       String
  targetTime   Int     // 単位: 分
  startDate    DateTime
  endDate      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ColorThemeType {
  original
  cool
  warm
  nature
  sunshine
}

enum InvitationStatus {
  pending
  accepted
  declined
}
